import asyncio
import base64
import logging
import os
import sys
import random
import re
import string
import time
from pyrogram import Client, filters, __version__
from pyrogram.enums import ParseMode
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import ADMINS, FORCE_MSG, START_MSG, CUSTOM_CAPTION, DISABLE_CHANNEL_BUTTON, PROTECT_CONTENT, PICS, CONFIRM_ID_CHNL
from pyrogram.errors import FloodWait, UserIsBlocked, InputUserDeactivated

from bot import Bot
from helper_func import subscribed, encode, decode, get_messages
from database.database import add_user, del_user, full_userbase, present_user

global_timer_value = None

BANNED_USERS = set()

@Bot.on_message(filters.command('start') & filters.private & subscribed)
async def start_command(client: Client, message: Message):
    id = message.from_user.id

    if id in BANNED_USERS:
        await message.reply_text("Sorry, you are banned.")
        return

    if not await present_user(id):
        try:
            await add_user(id)
        except:
            pass

    text = message.text
    if len(text) > 7:
        try:
            base64_string = text.split(" ", 1)[1]
        except:
            return
        string = await decode(base64_string)
        argument = string.split("-")
        if len(argument) == 3:
            try:
                start = int(int(argument[1]) / abs(client.db_channel.id))
                end = int(int(argument[2]) / abs(client.db_channel.id))
            except:
                return
            if start <= end:
                ids = range(start, end + 1)
            else:
                ids = []
                i = start
                while True:
                    ids.append(i)
                    i -= 1
                    if i < end:
                        break
        elif len(argument) == 2:
            try:
                ids = [int(int(argument[1]) / abs(client.db_channel.id))]
            except:
                return

        temp_msg = await message.reply("·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢, ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...")

        for progress in range(10, 101, 10):
            await temp_msg.edit_text(f"·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥... {progress}%")
            await asyncio.sleep(0.3)

        await temp_msg.delete()

        user_first_name = message.from_user.first_name
        user_last_name = message.from_user.last_name
        user_username = message.from_user.username
        user_id = message.from_user.id

        await client.send_message(
            chat_id=CONFIRM_ID_CHNL,
            text=f"·¥ús·¥á Ä …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ‚úÖ\n\n ·¥ò Ä·¥è·¥Ñ·¥áss·¥á·¥Ö {len(ids)} ·¥ç·¥áss·¥Ä…¢·¥ás “ì Ä·¥è·¥ç ·¥ús·¥á Ä:"
                 f"\n “ì…™ Äs·¥õ …¥·¥Ä·¥ç·¥á: {user_first_name}"
                 f"\n  ü·¥Äs·¥õ …¥·¥Ä·¥ç·¥á: {user_last_name}"
                 f"\n ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á: {user_username}"
                 f"\n ·¥ús·¥á Ä …™·¥Ö: {user_id}."
        )

        messages = await get_messages(client, ids)

        for msg in messages:
            if bool(CUSTOM_CAPTION) & bool(msg.document):
                caption = CUSTOM_CAPTION.format(previouscaption="" if not msg.caption else msg.caption.html,
                                                filename=msg.document.file_name)
            else:
                caption = "" if not msg.caption else msg.caption.html

            if DISABLE_CHANNEL_BUTTON:
                reply_markup = msg.reply_markup
            else:
                inline_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ö° ·¥õ…™·¥õ·¥Ä…¥ ·¥Ñ…™…¥·¥á·¥ç·¥Äs ‚ö°", url="https://t.me/Titan_CInemas")]
                ])
                reply_markup = inline_keyboard
                
            try:
                sent_message = await msg.copy(chat_id=message.from_user.id, caption=caption, parse_mode=ParseMode.HTML,
                                              reply_markup=reply_markup, protect_content=PROTECT_CONTENT)
                
                warning_msg = await message.reply("·¥õ ú·¥á “ì…™ ü·¥ás ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s ú·¥è Ä·¥õ ü è. “ì·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢ ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è Ä  è·¥è·¥ú Ä  Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥á.")
                await asyncio.sleep(180)
                await warning_msg.delete()
                await sent_message.delete()

            except FloodWait as e:
                await asyncio.sleep(e.x)
                sent_message = await msg.copy(chat_id=message.from_user.id, caption=caption, parse_mode=ParseMode.HTML,
                                              reply_markup=reply_markup, protect_content=PROTECT_CONTENT)
                
                warning_msg = await message.reply("·¥õ ú·¥á “ì…™ ü·¥ás ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s ú·¥è Ä·¥õ ü è. “ì·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢ ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è Ä  è·¥è·¥ú Ä  Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥á.")
                await asyncio.sleep(180)
                await warning_msg.delete()
                await sent_message.delete()

            except:
                pass
        return
    else:
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚ö° ·¥õ…™·¥õ·¥Ä…¥ ·¥Ñ…™…¥·¥á·¥ç·¥Äs ‚ö°", url="https://t.me/Titan_CInemas")
                ],
                [
                    InlineKeyboardButton("üßø  ú·¥á ü·¥ò", callback_data="help"),
                    InlineKeyboardButton("üî• ·¥Ä ô·¥è·¥ú·¥õ", callback_data="about")
                ],
                [
                    InlineKeyboardButton("üöÄ  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± üöÄ", url="https://t.me/Titan_Cinemas_Support_bot")
                ]
            ]
        )
        await message.reply_photo(
            photo=random.choice(PICS),
            caption = START_MSG.format(
                first = message.from_user.first_name,
                last = message.from_user.last_name,
                username = None if not message.from_user.username else '@' + message.from_user.username,
                mention = message.from_user.mention,
                id = message.from_user.id
            ),
            reply_markup = reply_markup,
            quote = True
        )
        return

#=====================================================================================##

WAIT_MSG = """"<b>·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ ...</b>"""

REPLY_ERROR = """<code>·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Äs ·¥Ä  Ä·¥á·¥ò ü·¥Ä è ·¥õ·¥è ·¥Ä…¥ è ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥áss·¥Ä…¢·¥á ·¥°…™·¥õ ú ·¥è·¥ú·¥õ ·¥Ä…¥ è s·¥ò·¥Ä·¥Ñ·¥ás.</code>"""

#=====================================================================================##

    
    
@Bot.on_message(filters.command('start') & filters.private)
async def not_joined(client: Client, message: Message):
    id = message.from_user.id

    if id in await list_banned_users():
        await message.reply("…™·¥õ  ü·¥è·¥è·¥ãs  ü…™·¥ã·¥á  è·¥è·¥ú Ä ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥ç·¥á ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ …¥·¥è·¥° @Official_Snowball")
        return
        
    buttons = [
        [
            InlineKeyboardButton("‚ö° ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 1",url = client.invitelink),
            InlineKeyboardButton("‚ö° ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 2",url = client.invitelink2)
        ],
        [
            InlineKeyboardButton("‚ö° ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 3",url = client.invitelink3),
            InlineKeyboardButton("‚ö° ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 4",url = client.invitelink4)
        ],
        [
            InlineKeyboardButton("‚ö° ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü 5",url = client.invitelink5)
        ]
    
    ]
    try:
        buttons.append(
            [
                InlineKeyboardButton(
                    text = 'üíû ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ üíû',
                    url = f"https://t.me/{client.username}?start={message.command[1]}"
                )
            ]
        )
    except IndexError:
        pass

    await message.reply_photo(
        photo=random.choice(PICS),
        caption = FORCE_MSG.format(
                first = message.from_user.first_name,
                last = message.from_user.last_name,
                username = None if not message.from_user.username else '@' + message.from_user.username,
                mention = message.from_user.mention,
                id = message.from_user.id
        ),
        reply_markup = InlineKeyboardMarkup(buttons),
        quote = True
    )

@Bot.on_message(filters.command("ban_user") & filters.private)
async def ban_command(client: Client, message: Message):
    print("Received /ban command")
    if message.from_user.id not in ADMINS:
        await message.reply_text(" èùôæùöÑ ·¥Ö·¥è…¥·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
        return

    if len(message.command) == 2:
        try:
            user_id = int(message.command[1])
            BANNED_USERS.add(user_id)
            await message.reply_text(f"·¥ús·¥á Ä ·¥°…™·¥õ ú …™·¥Ö {user_id}  ú·¥Äs  ô·¥á·¥á…¥  ô·¥Ä…¥…¥·¥á·¥Ö.")
        except ValueError:
            await message.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö.")
    else:
        await message.reply_text("·¥ò ü·¥á·¥Äs·¥á s·¥ò·¥á·¥Ñ…™“ì è ·¥Ä ·¥ús·¥á Ä …™·¥Ö ·¥õ·¥è  ô·¥Ä…¥.")

@Bot.on_message(filters.command("unban_user") & filters.private)
async def unban_command(client: Client, message: Message):
    print("Received /unban command")
    if message.from_user.id not in ADMINS:
        await message.reply_text(" è·¥è·¥ú ·¥Ö·¥è…¥·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
        return

    if len(message.command) == 2:
        try:
            user_id = int(message.command[1])
            if user_id in BANNED_USERS:
                BANNED_USERS.remove(user_id)
                await message.reply_text(f"·¥ús·¥á Ä ·¥°…™·¥õ ú …™·¥Ö {user_id}  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö.")
            else:
                await message.reply_text(f"·¥ús·¥á Ä ·¥°…™·¥õ ú …™·¥Ö {user_id} …™s …¥·¥è·¥õ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  ô·¥Ä…¥…¥·¥á·¥Ö.")
        except ValueError:
            await message.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä …™·¥Ö.")
    else:
        await message.reply_text("·¥ò ü·¥á·¥Äs·¥á s·¥ò·¥á·¥Ñ…™“ì è ·¥Ä ·¥ús·¥á Ä …™·¥Ö ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥.")


@Bot.on_message(filters.command("help") & filters.private)
async def report_command(client: Client, message: Message):
    buttons = [
        [
            InlineKeyboardButton("‚ö° ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ú·¥á Ä·¥á ‚ö°", url="https://t.me/Titan_Cinemas_Support_bot")
        ],
        [
            InlineKeyboardButton("üöÄ ·¥Ä ô·¥è·¥ú·¥õ", callback_data="about"),
            InlineKeyboardButton("üìù ·¥Ñ·¥è·¥ò…™ Ä…™…¢ ú·¥õs", url="https://t.me/Titan_Cinemas_Support_bot")
        ],
        [
            InlineKeyboardButton("üìù ·¥õ…™·¥õ·¥Ä…¥ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url="https://t.me/Titan_Cinemas_Support_bot"),
            InlineKeyboardButton("üåü  ü…™…¥·¥ã  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö?", url="https://t.me/Titan_Cinemas_Support_bot")
        ],
        [
            InlineKeyboardButton("üî•  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üî•", url="https://t.me/howtoopentitan/4")
        ]   
    ]

    reply_markup = InlineKeyboardMarkup(buttons)

    await message.reply_photo(
        photo=random.choice(PICS),
        caption="üÜò  ú·¥á ü·¥ò ?  è·¥á·¥Ä ú ·¥°·¥á ·¥Ä Ä·¥á  ú·¥á Ä·¥á ·¥õ·¥è  ú·¥á ü·¥ò  üÜò\n"
                "s·¥è ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° ·¥ç·¥ès·¥õ ·¥Äs·¥ã·¥á·¥Ö «´·¥ú·¥ás·¥õ…™·¥è…¥s.\n\n"
                "s·¥õ…™ ü ü s·¥è ü·¥†·¥á …¥·¥á ú…™  ú·¥ú·¥Ä …¥·¥è ·¥ò Ä·¥è ô ü·¥á·¥ç ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥ò·¥á ·¥Ñ ü…™·¥Ñ·¥ã ·¥ã·¥Ä Ä·¥è ‚úÖ",
        reply_markup=reply_markup,
    )

@Bot.on_message(filters.private & filters.command('broadcast') & filters.user(ADMINS))
async def send_text(client: Bot, message: Message):
    
    if message.from_user.id not in ADMINS:
        await message.reply_text(" è·¥è·¥ú ·¥Ö·¥è…¥·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
        return

    if message.reply_to_message:
        query = await full_userbase()
        broadcast_msg = message.reply_to_message
        total = 0
        successful = 0
        blocked = 0
        deleted = 0
        unsuccessful = 0
        
        pls_wait = await message.reply("<i>üíå  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥ç·¥áss·¥Ä…¢·¥á.. ·¥õ ú…™s ·¥°…™ ü ü ·¥õ·¥Ä·¥ã·¥á s·¥è·¥ç·¥á ·¥õ…™·¥ç·¥á </i>")
        for chat_id in query:
            try:
                await broadcast_msg.copy(chat_id)
                successful += 1
            except FloodWait as e:
                await asyncio.sleep(e.x)
                await broadcast_msg.copy(chat_id)
                successful += 1
            except UserIsBlocked:
                await del_user(chat_id)
                blocked += 1
            except InputUserDeactivated:
                await del_user(chat_id)
                deleted += 1
            except:
                unsuccessful += 1
                pass
            total += 1
        
        status = f"""<b><u> üáÆüá≥  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö üáÆüá≥ </u>

‚ö° ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs: <code>{total}</code>
‚ö° s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü: <code>{successful}</code>
‚ö°  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs: <code>{blocked}</code>
‚ö° ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs: <code>{deleted}</code>
‚ö° ·¥ú…¥s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü: <code>{unsuccessful}</code></b>"""
        
        return await pls_wait.edit(status)

    else:
        msg = await message.reply(REPLY_ERROR)
        await asyncio.sleep(8)
        await msg.delete()

@Bot.on_message(filters.command('restart') & filters.private & filters.user(ADMINS))
async def restart_bot(client: Bot, message: Message):
    try:
        restart_message = await message.reply("üîÑ  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ. ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ... ‚è≥")
        
        for i in range(10, 101, 10):
            await asyncio.sleep(0.5)
            await restart_message.edit(f"üîÑ  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ. ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ... {i}% ‚è≥")

        await restart_message.edit("‚úÖ  ô·¥è·¥õ  Ä·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!")
        await asyncio.sleep(2)
        await restart_message.delete()

        os.execl(sys.executable, sys.executable, *sys.argv)

    except Exception as e:
        await restart_message.edit(f"‚ùå ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.\n\nError: {str(e)}")
