from pyrogram import __version__
from bot import Bot
import random
from config import *
from pyrogram import Client, filters, enums
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto

contact_button = InlineKeyboardButton("‚ö° ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ú·¥á Ä·¥á ‚ö°", url="https://t.me/+whP0B-ffw2hkZDU1")
keyboard = InlineKeyboardMarkup([[contact_button]])

from database.database import *
from database.fsub_db import Fsub_DB
fsub_db = Fsub_DB()

REQUEST_CHANNELS = [REQUEST_CHANNEL, REQUEST_CHANNEL2]

ABOUT_TXT = """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚¶ø
‚îú‚ãó ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä : <a href=https://t.me/Titan_Cinemas_Support_bot>·¥õ…™·¥õ·¥Ä…¥ üíû</a>
‚îú‚ãó  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á : <a href=https://python.org/>·¥ò è·¥õ ú·¥è…¥3</a>
‚îú‚ãó  ü…™ ô Ä·¥Ä Ä è :  <a href=https://docs.pyrogram.org/>·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥Äs è…¥·¥Ñ…™·¥è 2.0.106</a>
‚îú‚ãó Íú±·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á : <a href=https://github.com/SirishChowdary/Titan_File_Store/Paid_File_Store>·¥ç·¥è·¥†…™·¥ás ·¥°·¥á ôs·¥á Ä…™·¥ás  ô·¥è·¥õ</a>
‚îú‚ãó ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü : <a href=https://t.me/+4db4vuYykAw3YmE1>…¢ Ä  ú·¥Ä·¥Ñ·¥ã·¥á Ä</a>
‚îú‚ãó s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò : <a href=https://t.me/+whP0B-ffw2hkZDU1>…¢ Ä  ú·¥Ä·¥Ñ·¥ã·¥á Ä s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö</a>
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚¶ø """

@Bot.on_callback_query()
async def cb_handler_func(client, query: CallbackQuery):
    data = query.data

    if data == "about":
        await query.message.edit_text(
            text=ABOUT_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="start"),
                        InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")
                    ]
                ]
            ),
        )
    elif data == "help":
        buttons = [
            [
                InlineKeyboardButton("·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ  ú·¥á Ä·¥á", url="https://t.me/+whP0B-ffw2hkZDU1")
            ],
            [
                InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data="about"),
                InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url="https://t.me/+4db4vuYykAw3YmE1")
            ]   
        ]
        await client.edit_message_media(
            query.message.chat.id, 
            query.message.id, 
            InputMediaPhoto(random.choice(PICS))
        )
        await query.message.edit_text(
            text=HELP_MSG.format(
                first_name=query.from_user.first_name,
                last_name=query.from_user.last_name or "Not Available",
                user_id=query.from_user.id, 
                username=None if not query.from_user.username else '@' + query.from_user.username or "Not Available",
            ),
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    elif data == "start":
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("…¢ Ä  ú·¥Ä·¥Ñ·¥ã·¥á Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è", url="https://t.me/+whP0B-ffw2hkZDU1")
                ],
                [
                    InlineKeyboardButton(" ú·¥á ü·¥ò", callback_data="help"),
                    InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data="about")
                ],
                [
                    InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/+4db4vuYykAw3YmE1")
                ]
            ]
        )
        await client.edit_message_media(
                query.message.chat.id, 
                query.message.id, 
                InputMediaPhoto(random.choice(PICS))   
        )
        await query.message.edit_text(
            text=START_MSG.format(first=query.from_user.first_name),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif data == "checksub":
            user_id = query.from_user.id

            if await db1.has_premium_access(user_id) or user_id in ADMINS:
                await query.message.reply_text("You have premium access.")
                return True

            if not all(REQUEST_CHANNELS):
                await query.message.reply_text("Please provide the channels to check your subscription.")
                return True

            try:
                user_in_channel1 = await fsub_db.get_user(REQUEST_CHANNELS[0], user_id)
                user_in_channel2 = await fsub_db.get_user(REQUEST_CHANNELS[1], user_id)

                if user_in_channel1 and user_in_channel2:
                    await query.message.reply_text("‚ö°  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥° ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥ò·¥ès·¥õ ·¥ò·¥á ·¥ä·¥Ä·¥è ·¥ò ú…™ Ä s·¥á ·¥Ñ ü…™·¥Ñ·¥ã ·¥ã·¥Ä Ä·¥è ·¥á…¥·¥ä·¥è è!!!")
                    return True

                elif user_in_channel1 or user_in_channel2:
                    await query.message.reply_text("üí´  ü·¥è·¥è·¥ã…™…¥…¢ …¢·¥è·¥è·¥Ö s·¥è “ì·¥Ä Ä  è·¥è·¥ú ·¥ä·¥è…™…¥·¥á·¥Ö 1 ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
                    return True

                else:
                    await query.message.reply_text("üíû ·¥Ö·¥è…¥'·¥õ ·¥õ Ä è ·¥õ·¥è  ô·¥á ·¥è·¥†·¥á Ä s·¥ç·¥Ä Ä·¥õ  ô·¥ú·¥Ö·¥Ö è ·¥ä·¥è…™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥Ä ô·¥è·¥†·¥á")
                    return False

            except Exception as e:
                logger.error(f"Error: {e}")
                await query.message.reply_text(f"Error: {e}")
                await query.message.reply_text("There was an error checking your subscription. Please try again later.")
                return False

    elif data == "close":
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass
