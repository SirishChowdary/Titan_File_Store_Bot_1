from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from bot import Bot
from config import ADMINS, shortner_url, shortner_api
from helper_func import encode, get_message_id
from cloudscraper import create_scraper
from urllib.parse import quote

async def short_url(url):
    c = create_scraper().request
    r = c('GET', f'https://{shortner_url}/api?api={shortner_api}&url={quote(url)}').json()
    return (r['shortenedUrl'])

@Bot.on_message(filters.private & filters.user(ADMINS) & filters.command('batch'))
async def batch(client: Client, message: Message):
    while True:
        try:
            first_message = await client.ask(text = "“ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á “ì…™ Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü (·¥°…™·¥õ ú «´·¥ú·¥è·¥õ·¥ás)..\n\n ·¥è Ä s·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ò·¥ès·¥õ  ü…™…¥·¥ã", chat_id = message.from_user.id, filters=(filters.forwarded | (filters.text & ~filters.forwarded)), timeout=60)
        except:
            return
        f_msg_id = await get_message_id(client, first_message)
        if f_msg_id:
            break
        else:
            await first_message.reply("‚ùå ·¥á Ä Ä·¥è Ä\n\n ·¥õ ú…™s “ì·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö ·¥ò·¥ès·¥õ …™s …¥·¥è·¥õ “ì Ä·¥è·¥ç ·¥ç è ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥è Ä ·¥õ ú…™s  ü…™…¥·¥ã …™s ·¥õ·¥Ä·¥ã·¥á…¥ “ì Ä·¥è·¥ç ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü", quote = True)
            continue

    while True:
        try:
            second_message = await client.ask(text = "“ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á  ü·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü (·¥°…™·¥õ ú «´·¥ú·¥è·¥õ·¥ás)..\n ·¥è Ä s·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ò·¥ès·¥õ  ü…™…¥·¥ã", chat_id = message.from_user.id, filters=(filters.forwarded | (filters.text & ~filters.forwarded)), timeout=60)
        except:
            return
        s_msg_id = await get_message_id(client, second_message)
        if s_msg_id:
            break
        else:
            await second_message.reply("‚ùå ·¥á Ä Ä·¥è Ä\n\n ·¥õ ú…™s “ì·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö ·¥ò·¥ès·¥õ …™s …¥·¥è·¥õ “ì Ä·¥è·¥ç ·¥ç è ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥è Ä ·¥õ ú…™s  ü…™…¥·¥ã …™s ·¥õ·¥Ä·¥ã·¥á…¥ “ì Ä·¥è·¥ç ·¥Ö ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü", quote = True)
            continue


    string = f"get-{f_msg_id * abs(client.db_channel.id)}-{s_msg_id * abs(client.db_channel.id)}"
    base64_string = await encode(string)
    link = f"https://t.me/Titan_Files_Ind_Bot?start={base64_string}"
    slink = await short_url(link)
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚ö° s ú·¥Ä Ä·¥á ·¥è Ä…™…¢…™…¥·¥Ä ü  ü…™…¥·¥ã ‚ö°", url=f'https://telegram.me/share/url?url={link}')]])
    await second_message.reply_text(f"<b>‚≠ï  ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä ·¥è Ä…™…¢…™…¥·¥Ä ü  ü…™…¥·¥ã - <code>{link}</code></b>\n\n‚≠ï  ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä s ú·¥è Ä·¥õ  ü…™…¥·¥ã :- <code>{slink}</code>", quote=True, reply_markup=reply_markup)


@Bot.on_message(filters.private & filters.user(ADMINS) & filters.command('genlink'))
async def link_generator(client: Client, message: Message):
    while True:
        try:
            channel_message = await client.ask(text = "Forward Message from the DB Channel (with Quotes)..\nor Send the DB Channel Post link", chat_id = message.from_user.id, filters=(filters.forwarded | (filters.text & ~filters.forwarded)), timeout=60)
        except:
            return
        msg_id = await get_message_id(client, channel_message)
        if msg_id:
            break
        else:
            await channel_message.reply("‚ùå Error\n\nthis Forwarded Post is not from my DB Channel or this Link is not taken from DB Channel", quote = True)
            continue

    base64_string = await encode(f"get-{msg_id * abs(client.db_channel.id)}")
    link = f"https://t.me/Titan_Files_Ind_Bot?start={base64_string}"
    slink = await short_url(link)
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ Share URL", url=f'https://telegram.me/share/url?url={link}')]])
    await channel_message.reply_text(f"<b>Here is your link</b>\n\n{link}\n\nShort Link:- {slink}", quote=True, reply_markup=reply_markup)
